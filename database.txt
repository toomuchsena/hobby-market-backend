/* eslint-disable */

import { Client } from "pg";
import * as fs from "fs";

const client = new Client({
  host: "veri-projesi-pgsql-db1-do-user-14764159-0.c.db.ondigitalocean.com",
  password: "AVNS_lJoFQMa-c2voJS-hLDP",
  database: "hobi_pazari",
  user: "doadmin",
  port: 25060,
  ssl: {
    ca: fs.readFileSync("ca-certificate.crt").toString(),
  },
});

class Database {
  constructor() {
    client.connect();
  }

  async getSingleUserInformation(userId: number) {
    // burası tekli kullanıcı alamya yarar
    const res = await client.query("SELECT * from users where id = $1", [
      userId,
    ]);

    return res.rows;
  }

  async getUserPassword(username: string) {
    // burası tekli kullanıcı alamya yarar
    const res = await client.query("SELECT * from users where username = $1", [
      username,
    ]);

    return res.rows[0];
  }
  async insertAccessToken(access_token: string, userId: string) {
    const res = await client.query(
      "INSERT into access_tokens (id,access_token, user_id) values (1,$1, $2)",
      [access_token, userId]
    );

    return res;
  }

  async updateProfile(
    name: string,
    surname: string,
    email: string,
    address: string,
    phone: string,
    userId: number
  ) {}
  
  // başlatmak için:npm run dev
  async getMyProducts(userId: number) {
    const res = await client.query(
      "select distinct product_id, product_name, description from users, products where seller_id = $1",[userId]
    );
    return res.rows;
  }

  async getSingleProduct(productId: number) {
    const res = await client.query(
      "select * from products where product_id = $1",[productId]
    );
    return res.rows;
  }

  async deleteSingleProduct(productId: number) {
    const res = await client.query(
      "delete  from products where product_id = $1",[productId]
    );// buraya try except yazmak lazım
      return "product_id = " + productId + " silindi."
  }

  async getCart(userId: number) {
    const res = await client.query(
      "select user_id, product_id,quantity from cart where user_id = $1",[userId]
    );
    return res.rows;
  }

  async addToCart(productId: number, userId: number) {
    const res = await client.query(
      "INSERT INTO cart (cart_id,user_id,product_id,quantity) VALUES  (NEXTVAL('SEQ_USER'),$1,$2,1)",[userId,productId]
    );
    return "Product_id = " + productId + "   user_id = " + userId + "   eklendi.";// buraya sequence kontrolü eklenmeli

  }

  async changeQuantityInCart(productId: number, userId: number, isRemoving: boolean) {
    if(isRemoving){// Buraya bulunan girdinin quantitysini -1, +1 yapma eklenecek
    const res = await client.query(
      "select user_id, product_id,quantity from cart where product_id = $1 and user_id = $2",[productId,userId]
    );
    return res.rows;
  }
  else{
    const res = await client.query(
      "select user_id, product_id,quantity from cart where product_id = $1 and user_id = $2",[productId,userId]
    );
    return res.rows;
  }}

  async deleteCart(userId: number) {
    const res = await client.query(
      "delete  from cart where user_id = $1",[userId]
    );// buraya try except yazmak lazım
      return "user_id = " + userId + " olan bütün cartlar silindi."
  }

  async getOrders(userId: number) {}

  async getPreviousPurchases(userId: number) {}

  async addCommentToProduct(
    productId: number,
    comment: string,
    star: number,
    userId: number
  ) {}

  async addOrder(address: string, userId: number) {}
}

export default new Database();
